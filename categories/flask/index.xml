<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flask on knows</title>
    <link>https://showo.github.io/categories/flask/</link>
    <description>Recent content in Flask on knows</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Jun 2018 21:31:18 +0800</lastBuildDate>
    
	<atom:link href="https://showo.github.io/categories/flask/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FlaskWeb 抄书四</title>
      <link>https://showo.github.io/post/flaskweb-%E6%8A%84%E4%B9%A6%E5%9B%9B/</link>
      <pubDate>Sun, 03 Jun 2018 21:31:18 +0800</pubDate>
      
      <guid>https://showo.github.io/post/flaskweb-%E6%8A%84%E4%B9%A6%E5%9B%9B/</guid>
      <description> 第5章 数据库 数据库按照一定规则保存数据，程序再发起查询取回所需数据。Web程序最常用基于关系模型的数据库，这种数据库也成为SQL数据库，因为他们使用结构化查询语言。不过最近几年文档数据库和键值对数据库成了流行的替代选择，这两种数据库合称为NoSQL数据库。
关系型数据库把数据存储在表中，表模拟程序中不同的实体。 表的列数是固定的，行业是可变的。列定义表所表示的实体的数据属性。表中的行定义各列对应的真实数据。
表中有个特殊的列，称为主键，其值为表中各行的唯一标识符。表中还可以有称为外键的列，引用同一个表或不同表中某行的主键。行这件的这种联系成为关系，这是关系型数据库模型的基础。
5.5 使用Flask-SQLAlchemy管理数据库 Flask-SQLAlchemy是一个Flask扩展，简化了在Flask程序中使用SQLAlchemy的操作。SQLAlchemy是一个很强大的关系型数据库框架，支持多种数据库后台。SQLAlchemy提供了高层ORM，也提供了使用数据库原生SQL的低层功能。
和其他大多数扩展一样，Flask-SQLAlchemy使用pip安装： &amp;gt; pip install flask-sqlalchemy
在Flask-SQLAlchemy中，数据库使用URL指定。最流行的数据库引擎采用的数据库URL格式如下表所示。
Flask-SQLAlchemy数据库URL 数据库引擎URLMySQLmysql://username:password@hostname/databasePostgrespostgresql://username:password@hostname/databaseSQLite(Unix)sqlite:////absolute/path/to/databaseSQLite(Windows)sqlite:///c:/absolute/path/to/database
在这些URL中，hostname表示MySQL服务所在的主机，可以是本地主机(localhsot)，也可以是远程服务器。数据库服务器上可以托管多个数据库，因此database表示使用的数据库名。如果数据库需要进行认证，username和password表示数据库用户密令。
SQLite数据库不需要使用服务器，因此不用指定hostname，username和password。URL中的database是硬盘上文件的文件名。
程序使用的数据库URL必须保存到Flask配置对象的SQLALCHEMY_DATABASE_URI键中。配置对象中海油一个很有用的选项，即SQLALCHEMY_COMMIT_ON_TEARDOWN键，将其设为True时，每次请求结束后都会自动提交数据库中的变动。其他配置选项的作用请参阅Flask-SQLAlchemy的文档。
以下示例展示如何初始化及配置一个简单的SQLite数据库。
hello.py,配置数据库：
from flask_sqlalchemy import SQLAlchemy basedir=os.path.abspath(os.path.dirname(__file__)) app=Flask(__name__) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;]=\ &#39;sqlite:///&#39;+os.path.join(basedir,&#39;data.sqlite&#39;) app.config[&#39;SQLALCHEMY_COMMIT_ON_TEARDOWN&#39;]=True app.config[&#39;SQLALCHEMY_COMMIT_ON_TEARDOWN&#39;]=False db=SQLAlchemy(app)  </description>
    </item>
    
    <item>
      <title>FlaskWeb 抄书三</title>
      <link>https://showo.github.io/post/flaskweb-%E6%8A%84%E4%B9%A6%E4%B8%89/</link>
      <pubDate>Mon, 28 May 2018 22:17:43 +0800</pubDate>
      
      <guid>https://showo.github.io/post/flaskweb-%E6%8A%84%E4%B9%A6%E4%B8%89/</guid>
      <description>&lt;h2 id=&#34;flaskweb-抄书三&#34;&gt;FlaskWeb-抄书三&lt;/h2&gt;

&lt;h3 id=&#34;第4章-web表单&#34;&gt;第4章 Web表单&lt;/h3&gt;

&lt;p&gt;Flask-WTF扩展可以处理web表单，这个扩展对独立的WTFForms包进行了包装，方便集成到Flask程序中。&lt;/p&gt;

&lt;p&gt;Flask-WTF及其依赖可使用pip安装：
(venv)d:learnfla&amp;gt;pip install flask-wtf&lt;/p&gt;

&lt;h4 id=&#34;4-1-跨站请求伪造保护&#34;&gt;4.1 跨站请求伪造保护&lt;/h4&gt;

&lt;p&gt;默认情况下，Flask-WTF能保护所有表单免受跨站请求伪造(Cross-Site Request Forgery，CSRF)的攻击。恶意网站把请求发送到被攻击者已登录的其他网站时就会引发CSRF攻击。&lt;/p&gt;

&lt;p&gt;为了实现CSRF保护，Flask-WTF需要程序设置一个密钥。Flask-WTF使用这个密钥生成加密令牌，再用令牌验证请求中表单数据的真伪。设置密钥的方法如以下示例所示：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FlaskWeb-抄书二</title>
      <link>https://showo.github.io/post/flaskweb%E6%8A%84%E4%B9%A6%E4%BA%8C/</link>
      <pubDate>Thu, 17 May 2018 21:42:58 +0800</pubDate>
      
      <guid>https://showo.github.io/post/flaskweb%E6%8A%84%E4%B9%A6%E4%BA%8C/</guid>
      <description>&lt;h2 id=&#34;flaskweb-抄书二&#34;&gt;FlaskWeb-抄书二&lt;/h2&gt;

&lt;h3 id=&#34;第3章-模板&#34;&gt;第3章 模板&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;模板是一个包含响应文本的文件，其中包含用占位变量表示的动态部分，其具体值只在请求上下文中才能知道。使用真实值替换变量，再返回最终得到的响应字符串，这一过程被称为&lt;strong&gt;渲染&lt;/strong&gt;，为了渲染模板，Flask使用了一个名为Jinja2的强大模板引擎。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;3-1-jinja2模板引擎&#34;&gt;3.1 Jinja2模板引擎&lt;/h4&gt;

&lt;p&gt;形式最简单的Jinja2模板就是一个包含响应文本的文件，以下示例就是一个Jinja2模板：&lt;/p&gt;

&lt;p&gt;示例：templates/index.html: Jinja2模板&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h1&amp;gt;hello，world！&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在前面2-2示例中，是视图函数user()返回的响应中包含一个使用&lt;strong&gt;变量&lt;/strong&gt;标识的动态部分。如下示例实现了这个响应。
示例： templates/user.html:Jinja2模板&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h1&amp;gt;hello,{{name}}&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FlaskWeb-抄书(1)</title>
      <link>https://showo.github.io/post/flaskweb%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 09 May 2018 22:01:22 +0800</pubDate>
      
      <guid>https://showo.github.io/post/flaskweb%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;h2 id=&#34;flask-web-抄书-1&#34;&gt;Flask Web-抄书(1)&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;背景环境：32位win10系统&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;第一章-安装&#34;&gt;第一章 安装&lt;/h3&gt;

&lt;h4 id=&#34;1-安装虚拟环境&#34;&gt;1.安装虚拟环境&lt;/h4&gt;

&lt;p&gt;1.1 前提：虚拟环境由第三方工具virtualenv创建&lt;/p&gt;

&lt;p&gt;1.2 步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;python中安装virtualenv工具，在cmd环境中执行&lt;strong&gt;pip install virtualenv&lt;/strong&gt;命令&lt;/li&gt;
&lt;li&gt;在新文件夹中创建虚拟环境：&lt;strong&gt;virtualenv venv&lt;/strong&gt; ,venv是安装了全新的虚拟环境文件夹。&lt;/li&gt;
&lt;li&gt;使用前激活虚拟环境：&lt;strong&gt;venv\Scripts\activata&lt;/strong&gt;,如果取消则相应的执行deacitvate.&lt;/li&gt;
&lt;li&gt;激活后显示：(venv)$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>