<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seo on KNOWs</title>
    <link>https://showo.github.io/categories/seo/</link>
    <description>Recent content in Seo on KNOWs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Aug 2018 17:25:21 +0800</lastBuildDate>
    
	<atom:link href="https://showo.github.io/categories/seo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SEO前线之SEO知识</title>
      <link>https://showo.github.io/post/seo%E5%89%8D%E7%BA%BF%E4%B9%8Bseo%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 19 Aug 2018 17:25:21 +0800</pubDate>
      
      <guid>https://showo.github.io/post/seo%E5%89%8D%E7%BA%BF%E4%B9%8Bseo%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h3 id=&#34;seo体系-流程-案例&#34;&gt;SEO体系/流程/案例&lt;/h3&gt;

&lt;p&gt;一.体系(PC&amp;amp;移动端)，理论基础&lt;/p&gt;

&lt;p&gt;二.流程，操作指导&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;挖掘空间-寻找做法-验证效果(2周出效果-2个月最大化)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;** 如何挖掘空间？**
* 网站日志
* 流量拓展[50%需求覆盖,30%排名,20%收录]
* 统计整站及各页面流量&lt;/p&gt;

&lt;h2 id=&#34;一-体系&#34;&gt;一.体系&lt;/h2&gt;

&lt;h3 id=&#34;完整seo体系&#34;&gt;完整SEO体系&lt;/h3&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;SEO流量&lt;/font&gt;=搜索需求覆盖+收录+排名+点击&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;先后关系&lt;/font&gt;: 搜索需求覆盖&amp;gt;收录&amp;gt;排名&amp;gt;点击&lt;/p&gt;

&lt;p&gt;通过以上四点可穷尽所有SEO操作.&lt;/p&gt;

&lt;h2 id=&#34;二-流程-操作指导&#34;&gt;二.流程，操作指导&lt;/h2&gt;

&lt;h4 id=&#34;1-搜索需求覆盖&#34;&gt;1 搜索需求覆盖&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1.1 含义&lt;/strong&gt;：针对搜索词，创建对应的着陆页来承载或改进原有的着陆页，使其承载更多的搜索词。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.2 如何做：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;title修改&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创造聚合页&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1.2.1 title修改&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在title中加入搜索量高的词(大网站以修改原先页面，小网站以新增页面为主)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;把最重要的词放到title左侧&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;完整出现搜索量最高的query&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;减少不必要的词及搜索量较低的词的出现&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python在SEO方面的脚本</title>
      <link>https://showo.github.io/post/python%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Sun, 22 Apr 2018 22:47:16 +0800</pubDate>
      
      <guid>https://showo.github.io/post/python%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8%E8%84%9A%E6%9C%AC/</guid>
      <description>&lt;h3 id=&#34;一-python-pillow批量处理图片尺寸&#34;&gt;一.python+pillow批量处理图片尺寸&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&#34;https://blog.csdn.net/atyzy/article/details/77905463&#34;&gt;来源-csdn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.代码(处理成宽600，高400的尺寸；开始只想处理宽度，让高度自适应，没有找得到相关的资料。还在图片本身尺寸够大，600和400的比例没有导致图片的变形等问题，其他小尺寸的图片则要注意。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# coding=utf-8
from PIL import Image
import os.path
import glob

def conver(jpgfile,outdir,width=600,height=400):
    img=Image.open(jpgfile)
    img=img.convert(&#39;RGB&#39;) #将GIF,png等格式转换为jpg
    try:
        new_img=img.resize((width,height))
        new_img.save(os.path.join(outdir,os.path.basename(jpgfile)))
        print(os.path.basename(jpgfile))
    except Exception as e:
        print(e)
				
for jpgfile in glob.glob(&amp;quot;./test1/*.jpg&amp;quot;):
    conver(jpgfile,&amp;quot;./test2/&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python批量脚本收集</title>
      <link>https://showo.github.io/post/python%E6%89%B9%E9%87%8F%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/</link>
      <pubDate>Tue, 10 Apr 2018 22:22:51 +0800</pubDate>
      
      <guid>https://showo.github.io/post/python%E6%89%B9%E9%87%8F%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/</guid>
      <description>&lt;p&gt;1.批量查询百度收录-python脚本
来源：&lt;a href=&#34;http://www.niumou.com.cn/61&#34;&gt;老丁学习笔记&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#coding=utf-8

import requests,time

def getUrl(filepath):
    with open(filepath,&#39;r&#39;) as f:
	    f=f.readlines()
	    return f

def getHtml(url):
    try:
        r=requests.get(url)
        r.raise_for_status()
        r.encoding=r.apparent_eccoding
        return r.text
    except:
        return &amp;quot;&amp;quot;

def isindex(link):
    url=link.replace(&amp;quot;http://&amp;quot;,&amp;quot;&amp;quot;).replace(&amp;quot;/&amp;quot;,&amp;quot;%2F&amp;quot;)
    url=&amp;quot;http://www.baidu.com/s?wd=&amp;quot;+url
    html=getHtml(url)
    if &amp;quot;很抱歉，没有找到与&amp;quot; in html or &amp;quot;没有找到该URL&amp;quot; in    html:
        print(link,&amp;quot;未收录&amp;quot;)
	
    else:
        print(link,&amp;quot;收录&amp;quot;)

def main():
	filepath=&amp;quot;&amp;quot;
	urls=getUrl(filepath)
	for url in urls:
	    url=url.strip()
	    isindex(url)
	    time.sleep(2)

if __name__=&#39;__mian__&#39;:
	main()

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;可以在打印收录/未收录之后将网址和结果保存到本地，目前想到的方式是通过with open的方式保存到另外一个文件夹中，但是输出结果又乱码。正在咨询他人……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>