<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on knows</title>
    <link>https://showo.github.io/post/</link>
    <description>Recent content in Posts on knows</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Aug 2018 17:25:21 +0800</lastBuildDate>
    
	<atom:link href="https://showo.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>&lt;SEO前线&gt;之SEO知识</title>
      <link>https://showo.github.io/post/seo%E5%9F%B9%E8%AE%AD%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 19 Aug 2018 17:25:21 +0800</pubDate>
      
      <guid>https://showo.github.io/post/seo%E5%9F%B9%E8%AE%AD%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;h3 id=&#34;seo体系-流程-案例&#34;&gt;SEO体系/流程/案例&lt;/h3&gt;

&lt;p&gt;一.体系(PC&amp;amp;移动端)，理论基础&lt;/p&gt;

&lt;p&gt;二.流程，操作指导&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;挖掘空间-寻找做法-验证效果(2周出效果-2个月最大化)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;** 如何挖掘空间？**
* 网站日志
* 流量拓展[50%需求覆盖,30%排名,20%收录]
* 统计整站及各页面流量&lt;/p&gt;

&lt;h2 id=&#34;一-体系&#34;&gt;一.体系&lt;/h2&gt;

&lt;h3 id=&#34;完整seo体系&#34;&gt;完整SEO体系&lt;/h3&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;SEO流量&lt;/font&gt;=搜索需求覆盖+收录+排名+点击&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;先后关系&lt;/font&gt;: 搜索需求覆盖&amp;gt;收录&amp;gt;排名&amp;gt;点击&lt;/p&gt;

&lt;p&gt;通过以上四点可穷尽所有SEO操作.&lt;/p&gt;

&lt;h2 id=&#34;二-流程-操作指导&#34;&gt;二.流程，操作指导&lt;/h2&gt;

&lt;h4 id=&#34;1-搜索需求覆盖&#34;&gt;1 搜索需求覆盖&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1.1 含义&lt;/strong&gt;：针对搜索词，创建对应的着陆页来承载或改进原有的着陆页，使其承载更多的搜索词。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.2 如何做：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;title修改&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创造聚合页&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1.2.1 title修改&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在title中加入搜索量高的词(大网站以修改原先页面，小网站以新增页面为主)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;把最重要的词放到title左侧&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;完整出现搜索量最高的query&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;减少不必要的词及搜索量较低的词的出现&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wordpress ￥300</title>
      <link>https://showo.github.io/post/wordpress-300/</link>
      <pubDate>Wed, 20 Jun 2018 22:37:43 +0800</pubDate>
      
      <guid>https://showo.github.io/post/wordpress-300/</guid>
      <description>课程章节 1.WordPress建站主机 2.仪表盘首页 2.1 后台模块只留下‘概览’和‘活动’ 2.2 更新提示 2.2.1 更新类别：3类；主题，插件，核心系统
核心系统更新后台每个页面都会看到； 插件更新会在插件栏目看到； 主题更新会在外观&amp;gt;主题栏目
总览更新：后台顶部
2.2.3 手动更新：
搜索插件：backup
应对更新出现问题，提前更新数据库和内容
设置-updraftplus归档-还原
2.2.4 自动备份
借助插件实现自动备份：updraftplus
updraftplus-设置，将manual模式更改为其他自动频率
不适合特别大的网站，例如上百兆；
付费功能
2.2.5 自动更新
插件-搜索‘autoupdate’，选择合适的插件。 教程作者选用了‘companion auto update’ 安装，配置
2.2.6 安全
插件-wordfence
2.2.7 常规设置
WordPress地址和常规地址的设置，一般是相同的。假如二级域名设置，会不一样
设置-撰写：
外观-编辑-open link in new tab-template parts-post-默认格式文件
通过电子邮件发布
2.2.8 阅读设置
主页显示：最新文章、静态页面
文章列表页，不显示正文内容
搜索引擎不可见
页面-创建
2.2.9 讨论设置
反垃圾插件：akismet
头像显示：国内需要使用插件：搜索user avatar
2.3.0 媒体设置
缩略图大小设置
2.3.1 固定连接设置
设置-固定连接
网站上线前需要在设置-阅读中更改‘搜索引擎收录’配置
网址中的中文，不建议
页面中设置固定连接需要使用插件
2.3.2 插件permalinks customizer配置固定链接
2.3.3 设计分类目录</description>
    </item>
    
    <item>
      <title>FlaskWeb 抄书四</title>
      <link>https://showo.github.io/post/flaskweb-%E6%8A%84%E4%B9%A6%E5%9B%9B/</link>
      <pubDate>Sun, 03 Jun 2018 21:31:18 +0800</pubDate>
      
      <guid>https://showo.github.io/post/flaskweb-%E6%8A%84%E4%B9%A6%E5%9B%9B/</guid>
      <description> 第5章 数据库 数据库按照一定规则保存数据，程序再发起查询取回所需数据。Web程序最常用基于关系模型的数据库，这种数据库也成为SQL数据库，因为他们使用结构化查询语言。不过最近几年文档数据库和键值对数据库成了流行的替代选择，这两种数据库合称为NoSQL数据库。
关系型数据库把数据存储在表中，表模拟程序中不同的实体。 表的列数是固定的，行业是可变的。列定义表所表示的实体的数据属性。表中的行定义各列对应的真实数据。
表中有个特殊的列，称为主键，其值为表中各行的唯一标识符。表中还可以有称为外键的列，引用同一个表或不同表中某行的主键。行这件的这种联系成为关系，这是关系型数据库模型的基础。
5.5 使用Flask-SQLAlchemy管理数据库 Flask-SQLAlchemy是一个Flask扩展，简化了在Flask程序中使用SQLAlchemy的操作。SQLAlchemy是一个很强大的关系型数据库框架，支持多种数据库后台。SQLAlchemy提供了高层ORM，也提供了使用数据库原生SQL的低层功能。
和其他大多数扩展一样，Flask-SQLAlchemy使用pip安装： &amp;gt; pip install flask-sqlalchemy
在Flask-SQLAlchemy中，数据库使用URL指定。最流行的数据库引擎采用的数据库URL格式如下表所示。
Flask-SQLAlchemy数据库URL 数据库引擎URLMySQLmysql://username:password@hostname/databasePostgrespostgresql://username:password@hostname/databaseSQLite(Unix)sqlite:////absolute/path/to/databaseSQLite(Windows)sqlite:///c:/absolute/path/to/database
在这些URL中，hostname表示MySQL服务所在的主机，可以是本地主机(localhsot)，也可以是远程服务器。数据库服务器上可以托管多个数据库，因此database表示使用的数据库名。如果数据库需要进行认证，username和password表示数据库用户密令。
SQLite数据库不需要使用服务器，因此不用指定hostname，username和password。URL中的database是硬盘上文件的文件名。
程序使用的数据库URL必须保存到Flask配置对象的SQLALCHEMY_DATABASE_URI键中。配置对象中海油一个很有用的选项，即SQLALCHEMY_COMMIT_ON_TEARDOWN键，将其设为True时，每次请求结束后都会自动提交数据库中的变动。其他配置选项的作用请参阅Flask-SQLAlchemy的文档。
以下示例展示如何初始化及配置一个简单的SQLite数据库。
hello.py,配置数据库：
from flask_sqlalchemy import SQLAlchemy basedir=os.path.abspath(os.path.dirname(__file__)) app=Flask(__name__) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;]=\ &#39;sqlite:///&#39;+os.path.join(basedir,&#39;data.sqlite&#39;) app.config[&#39;SQLALCHEMY_COMMIT_ON_TEARDOWN&#39;]=True app.config[&#39;SQLALCHEMY_COMMIT_ON_TEARDOWN&#39;]=False db=SQLAlchemy(app)  </description>
    </item>
    
    <item>
      <title>FlaskWeb 抄书三</title>
      <link>https://showo.github.io/post/flaskweb-%E6%8A%84%E4%B9%A6%E4%B8%89/</link>
      <pubDate>Mon, 28 May 2018 22:17:43 +0800</pubDate>
      
      <guid>https://showo.github.io/post/flaskweb-%E6%8A%84%E4%B9%A6%E4%B8%89/</guid>
      <description>&lt;h2 id=&#34;flaskweb-抄书三&#34;&gt;FlaskWeb-抄书三&lt;/h2&gt;

&lt;h3 id=&#34;第4章-web表单&#34;&gt;第4章 Web表单&lt;/h3&gt;

&lt;p&gt;Flask-WTF扩展可以处理web表单，这个扩展对独立的WTFForms包进行了包装，方便集成到Flask程序中。&lt;/p&gt;

&lt;p&gt;Flask-WTF及其依赖可使用pip安装：
(venv)d:learnfla&amp;gt;pip install flask-wtf&lt;/p&gt;

&lt;h4 id=&#34;4-1-跨站请求伪造保护&#34;&gt;4.1 跨站请求伪造保护&lt;/h4&gt;

&lt;p&gt;默认情况下，Flask-WTF能保护所有表单免受跨站请求伪造(Cross-Site Request Forgery，CSRF)的攻击。恶意网站把请求发送到被攻击者已登录的其他网站时就会引发CSRF攻击。&lt;/p&gt;

&lt;p&gt;为了实现CSRF保护，Flask-WTF需要程序设置一个密钥。Flask-WTF使用这个密钥生成加密令牌，再用令牌验证请求中表单数据的真伪。设置密钥的方法如以下示例所示：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FlaskWeb-抄书二</title>
      <link>https://showo.github.io/post/flaskweb%E6%8A%84%E4%B9%A6%E4%BA%8C/</link>
      <pubDate>Thu, 17 May 2018 21:42:58 +0800</pubDate>
      
      <guid>https://showo.github.io/post/flaskweb%E6%8A%84%E4%B9%A6%E4%BA%8C/</guid>
      <description>&lt;h2 id=&#34;flaskweb-抄书二&#34;&gt;FlaskWeb-抄书二&lt;/h2&gt;

&lt;h3 id=&#34;第3章-模板&#34;&gt;第3章 模板&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;模板是一个包含响应文本的文件，其中包含用占位变量表示的动态部分，其具体值只在请求上下文中才能知道。使用真实值替换变量，再返回最终得到的响应字符串，这一过程被称为&lt;strong&gt;渲染&lt;/strong&gt;，为了渲染模板，Flask使用了一个名为Jinja2的强大模板引擎。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;3-1-jinja2模板引擎&#34;&gt;3.1 Jinja2模板引擎&lt;/h4&gt;

&lt;p&gt;形式最简单的Jinja2模板就是一个包含响应文本的文件，以下示例就是一个Jinja2模板：&lt;/p&gt;

&lt;p&gt;示例：templates/index.html: Jinja2模板&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h1&amp;gt;hello，world！&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在前面2-2示例中，是视图函数user()返回的响应中包含一个使用&lt;strong&gt;变量&lt;/strong&gt;标识的动态部分。如下示例实现了这个响应。
示例： templates/user.html:Jinja2模板&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h1&amp;gt;hello,{{name}}&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FlaskWeb-抄书(1)</title>
      <link>https://showo.github.io/post/flaskweb%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 09 May 2018 22:01:22 +0800</pubDate>
      
      <guid>https://showo.github.io/post/flaskweb%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;h2 id=&#34;flask-web-抄书-1&#34;&gt;Flask Web-抄书(1)&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;背景环境：32位win10系统&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;第一章-安装&#34;&gt;第一章 安装&lt;/h3&gt;

&lt;h4 id=&#34;1-安装虚拟环境&#34;&gt;1.安装虚拟环境&lt;/h4&gt;

&lt;p&gt;1.1 前提：虚拟环境由第三方工具virtualenv创建&lt;/p&gt;

&lt;p&gt;1.2 步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;python中安装virtualenv工具，在cmd环境中执行&lt;strong&gt;pip install virtualenv&lt;/strong&gt;命令&lt;/li&gt;
&lt;li&gt;在新文件夹中创建虚拟环境：&lt;strong&gt;virtualenv venv&lt;/strong&gt; ,venv是安装了全新的虚拟环境文件夹。&lt;/li&gt;
&lt;li&gt;使用前激活虚拟环境：&lt;strong&gt;venv\Scripts\activata&lt;/strong&gt;,如果取消则相应的执行deacitvate.&lt;/li&gt;
&lt;li&gt;激活后显示：(venv)$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python在SEO方面的脚本</title>
      <link>https://showo.github.io/post/python%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Sun, 22 Apr 2018 22:47:16 +0800</pubDate>
      
      <guid>https://showo.github.io/post/python%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8%E8%84%9A%E6%9C%AC/</guid>
      <description>&lt;h3 id=&#34;一-python-pillow批量处理图片尺寸&#34;&gt;一.python+pillow批量处理图片尺寸&lt;/h3&gt;

&lt;p&gt;1.&lt;a href=&#34;https://blog.csdn.net/atyzy/article/details/77905463&#34;&gt;来源-csdn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.代码(处理成宽600，高400的尺寸；开始只想处理宽度，让高度自适应，没有找得到相关的资料。还在图片本身尺寸够大，600和400的比例没有导致图片的变形等问题，其他小尺寸的图片则要注意。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# coding=utf-8
from PIL import Image
import os.path
import glob

def conver(jpgfile,outdir,width=600,height=400):
    img=Image.open(jpgfile)
    img=img.convert(&#39;RGB&#39;) #将GIF,png等格式转换为jpg
    try:
        new_img=img.resize((width,height))
        new_img.save(os.path.join(outdir,os.path.basename(jpgfile)))
        print(os.path.basename(jpgfile))
    except Exception as e:
        print(e)
				
for jpgfile in glob.glob(&amp;quot;./test1/*.jpg&amp;quot;):
    conver(jpgfile,&amp;quot;./test2/&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python批量脚本收集</title>
      <link>https://showo.github.io/post/python%E6%89%B9%E9%87%8F%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/</link>
      <pubDate>Tue, 10 Apr 2018 22:22:51 +0800</pubDate>
      
      <guid>https://showo.github.io/post/python%E6%89%B9%E9%87%8F%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/</guid>
      <description>&lt;p&gt;1.批量查询百度收录-python脚本
来源：&lt;a href=&#34;http://www.niumou.com.cn/61&#34;&gt;老丁学习笔记&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#coding=utf-8

import requests,time

def getUrl(filepath):
    with open(filepath,&#39;r&#39;) as f:
	    f=f.readlines()
	    return f

def getHtml(url):
    try:
        r=requests.get(url)
        r.raise_for_status()
        r.encoding=r.apparent_eccoding
        return r.text
    except:
        return &amp;quot;&amp;quot;

def isindex(link):
    url=link.replace(&amp;quot;http://&amp;quot;,&amp;quot;&amp;quot;).replace(&amp;quot;/&amp;quot;,&amp;quot;%2F&amp;quot;)
    url=&amp;quot;http://www.baidu.com/s?wd=&amp;quot;+url
    html=getHtml(url)
    if &amp;quot;很抱歉，没有找到与&amp;quot; in html or &amp;quot;没有找到该URL&amp;quot; in    html:
        print(link,&amp;quot;未收录&amp;quot;)
	
    else:
        print(link,&amp;quot;收录&amp;quot;)

def main():
	filepath=&amp;quot;&amp;quot;
	urls=getUrl(filepath)
	for url in urls:
	    url=url.strip()
	    isindex(url)
	    time.sleep(2)

if __name__=&#39;__mian__&#39;:
	main()

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;可以在打印收录/未收录之后将网址和结果保存到本地，目前想到的方式是通过with open的方式保存到另外一个文件夹中，但是输出结果又乱码。正在咨询他人……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>生活片段</title>
      <link>https://showo.github.io/post/%E7%94%9F%E6%B4%BB%E7%89%87%E6%AE%B5/</link>
      <pubDate>Sat, 07 Apr 2018 16:08:33 +0800</pubDate>
      
      <guid>https://showo.github.io/post/%E7%94%9F%E6%B4%BB%E7%89%87%E6%AE%B5/</guid>
      <description>&lt;p&gt;莫名的烦躁，就像是溺水一样的焦虑在这个春天的午后显得尤为强烈。我一直是个积极的懒惰者，随时战术勤奋战略消极吧，虽然花费了大量的时间用在改善自己的技能上，但实际并没有什么卵用，时间的推移必然出现消极反馈。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>半生</title>
      <link>https://showo.github.io/post/%E5%8D%8A%E7%94%9F/</link>
      <pubDate>Sun, 11 Feb 2018 23:09:09 +0800</pubDate>
      
      <guid>https://showo.github.io/post/%E5%8D%8A%E7%94%9F/</guid>
      <description>&lt;p&gt;第一次看到这首诗觉得非常的惊艳，觉得一个人的感觉完全可以被文字给撑开。人生有涯，诗歌无界。这首诗是从&lt;a href=&#34;http://blog.sina.com.cn/s/blog_657d22b80100lvkj.html&#34;&gt;葛巾玉版&lt;/a&gt;的新浪博客上转载而来，原作者不明。希望你像我一样喜欢。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数字化营销课程</title>
      <link>https://showo.github.io/post/%E6%95%B0%E5%AD%97%E5%8C%96%E8%90%A5%E9%94%80%E8%AF%BE%E7%A8%8B/</link>
      <pubDate>Sat, 10 Feb 2018 15:51:42 +0800</pubDate>
      
      <guid>https://showo.github.io/post/%E6%95%B0%E5%AD%97%E5%8C%96%E8%90%A5%E9%94%80%E8%AF%BE%E7%A8%8B/</guid>
      <description>&lt;p&gt;收集整理一些线上优质的数字化营销课程，涉及搜索引擎、社会化媒体、信息流等。主要内容涵盖基础介绍、操作优化和数据分析等几个部分。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hugo搭建博客</title>
      <link>https://showo.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 02 Dec 2017 21:44:50 +0800</pubDate>
      
      <guid>https://showo.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://showo.github.io/img/article/inspiration-banner.png&#34; alt=&#34;&#34; /&gt;
这事一篇关于hugo生成博客及安装在GitHub上实现GitHub pages效果博客的文章，流程及步骤简单极易上手。现在的问题是主题下的说明文档内容较少，需要到gohugo.io查找相关的标准。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>